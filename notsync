#!/usr/bin/python

import ConfigParser
import imaplib
import re
import subprocess
import time
from cnotmuch import notmuch

mid_regexp = re.compile('message-id: +\<(.*)\>', re.IGNORECASE)
ret_regexp = re.compile('([0-9]+) +.*')

# The `find_message' routine will throw an exception if the database
# is modified in another thread, so we have to retry in that case.
def mid_exists(nm, mid):
    exists = False
    attempted = False
    while not attempted:
        try:
            exists = nm.find_message(mid)
            attempted = True
        except NotmuchError:
            print 'Exception during find_message'
            pass
    return exists

def poll_server(host, user, password, extension):
    global nm, debug, verbose

    srv = imaplib.IMAP4_SSL(host)
    srv.login(user, password)
    typ, msgnums = srv.select()
    typ, data = srv.fetch('1:%s' % msgnums[0], '(BODY.PEEK[HEADER.FIELDS (MESSAGE-ID)])')
    for mid_or_str in data:
        if type(mid_or_str) == tuple:
            (ret, mid) = mid_or_str
            mid_match = mid_regexp.match(mid)
            if mid_match:
                mid = mid_match.group(1)
                if not mid_exists(nm, mid):
                    if verbose:
                        print 'New: %s' % mid
                    ret_match = ret_regexp.match(ret)
                    if ret_match:
                        num = ret_match.group(1)
                        typ, data = srv.fetch(num, '(RFC822)')
                        procmail(data[0][1], extension)
            else:
                print 'Regexp did not match.'
    srv.close()
    srv.logout()

def delete_old(host, user, password, delay):
    global debug, verbose

    # `delay' is in days.
    then = time.time() - (delay * 24 * 60 * 60)
    thenstr = time.strftime('%d-%b-%Y', time.gmtime(then))

    srv = imaplib.IMAP4_SSL(host)
    srv.login(user, password)
    typ, msgnums = srv.select()
    typ, data = srv.search(None, '(BEFORE %s)' % thenstr)
    if verbose:
        print 'Deleting %s' % data[0]
    srv.store(','.join(data[0].split()), '+FLAGS', '\\Deleted')
    srv.close()
    srv.logout()

def procmail(message, extension):
    args = ['procmail']
    if extension != '':
        args += ['-a', extension]

    p = subprocess.Popen(args, stdin = subprocess.PIPE).stdin
    p.write(message)
    p.close()

config = ConfigParser.ConfigParser()
config.read('notsync.cfg')

try:
    verbose = config.getboolean('general', 'verbose')
except ConfigParser.NoOptionError:
    verbose = False
try:
    debug = config.getboolean('general', 'debug')
except ConfigParser.NoOptionError:
    debug = False
try:
    keep = config.getint('general', 'keep')
except ConfigParser.NoOptionError:
    keep = 30

if debug:
    verbose = True

nm = notmuch.Database()

for server in config.get('general', 'servers').split():
    if verbose:
        print 'Polling %s...' % server
    try:
        ext = config.get(server, 'extension')
    except:
        ext = ''
    poll_server(host = config.get(server, 'host'),
                user = config.get(server, 'user'),
                password = config.get(server, 'password'),
                extension = ext)

    if verbose:
        print 'Cleaning %s...' % server
    delete_old(host = config.get(server, 'host'),
               user = config.get(server, 'user'),
               password = config.get(server, 'password'),
               delay = keep)
